package org.genivi.appfw

<**
	@description : This interface is exposed by app manager to privileged apps 
**>
interface AppManager_Core
{
	<**
		@description : a function to enumerate all apps in the system. It returns an array of app IDs which are reverse DNS style names 
		stored by app manager during app installation 
	**>
	method GetInstalledApps
	{
		out
		{
			String[] app_ids
		}
	}
	
	<**
		@description : This method provides the information of the app from manifest data encapsulated in the AppInfo struct
		app_id is a reverse DNS style name of the app which should be a part of manifest information 
	**>
	method GetAppInfo
	{
		in
		{
			String app_id
		}
		out
		{
			AppInfo info
		}
	}

	<**
		@description : launch an app using the app_id. App manager resolves the app_id to an entry point and launches it.
	**>
	method LaunchApp
	{
		in
		{
			String app_id
		}
	}

	<**
		@description : This should signal the addition or deletion of new apps, change in capability of apps to handle mimes etc. It is adviced to call GetInstalledApps and GetAppInfo as needed when this broadcast is received.
		The usecase for this would be that a new app is installed with certain MIME capabilities and system UI like launcher needs to be aware of this new app 
	**>
	broadcast AppsInfoUpdated {}	


	<**
		@description : AppInfo is a map of manifest data. It stores Key and value as strings .The manifest should be a part of app bundle and app manager extracts and stores this data
	**>

	struct AppInfo
	{
		KeyValue values
	}

	<**
		@description : AppStack is the attribute that provides the list of apps that was activated from start of ignition cycle and their states
		This can be particularly useful if for example an app like launcher wants to implement the back stack.
	**>
	struct AppStack
	{
		KeyValue values
	}

	<**
		@description: KeyValue is a map data type with Key and Value as strings. It can be used anywhere in this interface file.
	**>

	map KeyValue
	{
		String to String
	}

	<**
		@description : ChangeAppState API can be used by system UI to request app manager to change state of an app represented by app_id. It is not guarenteed that app manager will change the app state to the one requested.
		The calling component should check for any errors from this call.
	**>

	method ChangeAppState
	{
		in
		{
			String app_id
			AppState app_state
		}

	}

	enumeration AppState
	{
		APP_STATE_START=0
		APP_STATE_BACKGROUND=1
		APP_STATE_SHOW=2
		APP_STATE_RESTART=3
		APP_STATE_OFF=4
		APP_STATE_PAUSE=5
	}

}
